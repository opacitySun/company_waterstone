{
    // JSHint Default Configuration File (as on JSHint website)
    // See http://jshint.com/docs/ for more details

    "maxerr"        : 50,       // {int} Maximum error before stopping

    // Enforcing                When set to true, these options will make JSHint produce more warnings about your code.
    "bitwise"       : false,    // true: Prohibit bitwise operators (&, |, ^, etc.)
    "curly"         : true,     // true: Require {} for every new block or scope
    "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
    "esversion"     : 6,        // {int} Number of the ECMAScript version e.g. 3/5/6
    "freeze"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.
    "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
    "funcscope"     : false,    // true: Tolerate defining variables inside control statements
    "futurehostile" : true,     // true: Enables warnings about the use of identifiers which are defined in future versions of JS
    "iterator"      : false,    // true: Tolerate using the `__iterator__` property
    "latedef"       : false,    // true: Require variables/functions to be defined before being used
    "maxparams"     : false,    // {int} Max number of formal params allowed per function
    "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
    "maxstatements" : false,    // {int} Max number statements per function
    "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
    "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
    "nocomma"       : false,    // true: Prohibits the use of the comma operator
    "nonbsp"        : true,     // true: Prohibit "non-breaking whitespace" characters.
    "nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
    "notypeof"      : false,    // true: Tolerate invalid typeof operator values
    "shadow"        : false,    // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
                                // inner check for variables defined in the same scope only
                                // outer check for variables defined in outer scopes as well
                                // false same as inner
    "singleGroups"  : false,    // true: prohibits the use of the grouping operator when it is not strictly required
    "strict"        : true,     // true: There must be a "use strict"; directive at function level
                                // global: there must be a "use strict"; directive at global level
                                // implied lint the code as if there is the "use strict"; directive
                                // false disable warnings about strict mode
    "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
    "unused"        : true,     // true: Require all defined variables be used
    "varstmt"       : false,    // true: The use of VariableStatements are forbidden.e.g var a; // Warning: `var` declarations are forbidden. Use `let` or `const` instead.

    // Relaxing
    "asi"           : false,    // true: Tolerate Automatic Semicolon Insertion (no semicolons)
    "boss"          : false,    // true: Tolerate assignments where comparisons would be expected
    "debug"         : false,    // true: Allow debugger statements e.g. browser breakpoints.
    "elision"       : false,    // true: your code uses ES3 array elision elements, or empty elements (for example, [1, , , 4, , , 7])
    "eqnull"        : false,    // true: Tolerate use of `== null`
    "evil"          : false,    // true: Tolerate use of `eval` and `new Function()`
    "expr"          : true,     // true: Tolerate `ExpressionStatement` as Programs
    "lastsemic"     : false,    // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "loopfunc"      : false,    // true: Tolerate functions being defined in loops
    "moz"           : false,    // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                                // (ex: `for each`, multiple try/catch, function expressionâ€¦)
    "noyield"       : false,    // true: Tolerate generator functions with no yield statement in them.
    "plusplus"      : false,    // true: Prohibit use of `++` & `--`
    "proto"         : false,    // true: Tolerate using the `__proto__` property
    "scripturl"     : false,    // true: Tolerate script-targeted URLs
    "supernew"      : false,    // true: Tolerate `new function () { ... };` and `new Object;`
    "validthis"     : true,     // true: Tolerate using this in a non-constructor function
    "withstmt"      : true,     // true: warnings about the use of the 'with' statement

    // Environments
    "browser"       : true,     // Web Browser (window, document, etc)
    "browserify"    : false,    // Browserify (node.js code in the browser)
    "couch"         : false,    // CouchDB
    "devel"         : true,     // Development/debugging (alert, confirm, etc)
    "dojo"          : false,    // Dojo Toolkit
    "jasmine"       : false,    // Jasmine
    "jquery"        : true,     // jQuery
    "mocha"         : true,     // Mocha
    "module"        : true,     // Input code describes an ECMAScript 6 module
    "mootools"      : false,    // MooTools
    "node"          : true,     // Node.js
    "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
    "prototypejs"   : false,    // Prototype and Scriptaculous
    "qunit"         : false,    // QUnit
    "rhino"         : false,    // Rhino
    "shelljs"       : false,    // ShellJS
    "typed"         : false,    // Defines globals for typed array constructors(ArrayBuffer-Int8Array,Uint16Array,Float32Array..)
    "worker"        : false,    // Web Workers
    "wsh"           : false,    // Windows Scripting Host
    "yui"           : false,    // Yahoo User Interface

    // Custom Globals
    "globals"       : {},       // additional predefined global variables
    "predef"        : [         // JSHint will consider variables declared in this way to be read-only
        "angular", "moment","echarts","laydate","go"
    ]
}
